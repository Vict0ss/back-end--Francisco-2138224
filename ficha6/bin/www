var http = require('http');
var fs = require('fs');
var path = require('path');
var express = require('express');
var app = express();

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);

function log(req, res) {
  var path = req.route ? req.route.path : req.url;
  var method = req.method;
  var date = new Date();
  var str = `Path: ${path}, Method: ${method}, Date: ${date}\n`;
  fs.appendFileSync("log.txt", str);
}

app.get("/", (req, res) => {
  log(req, res);
  var body = "Hello World";
  res.writeHead(200, {
    "Content-Length": Buffer.byteLength(body),
    "Content-Type": "text/plain"
  });
  res.end(body);
});

app.get("/html", (req, res) => {
  log(req, res);
  var body = "<html><h1>texto para testar o codigo</h1></html>";
  res.writeHead(200, {
    "Content-Length": Buffer.byteLength(body),
    "Content-Type": "text/html"
  });
  res.end(body);
});

app.get("/file", (req, res) => {
  log(req, res);
  var filePath = path.join(__dirname, 'index.html');
  fs.readFile(filePath, (err, data) => {
    if (err) {
      res.writeHead(500, { "Content-Type": "text/plain" });
      res.end("Erro ao ler o arquivo");
      return;
    }
    res.writeHead(200, { "Content-Type": "text/html" });
    res.end(data);
  });
});

app.get("/replace", (req, res) => {
  log(req, res);
  var body = "<html><h1>  Ola: {{date}}</h1></html>";
  const currentDate = new Date().toLocaleString();
  body = body.replace("{{date}}", currentDate);

  res.writeHead(200, {
    "Content-Length": Buffer.byteLength(body),
    "Content-Type": "text/html"
  });
  res.end(body);
});



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
